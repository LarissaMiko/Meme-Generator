const express = require("express");
const bodyParser = require("body-parser");
const MongoClient = require("mongodb").MongoClient;
const app = express();
const cors = require("cors");
const path = require("path");
const request = require('request');
// create unique ids fpr users
const shortid = require('shortid');
// multer to be able to parse multipart/form-data
const multer = require('multer');
const { ObjectId } = require("mongodb");
const upload = multer();

MongoClient.connect(
  "mongodb+srv://OMM:omm1234@cluster0.vl6ey.mongodb.net/OMM?retryWrites=true&w=majority",
  { useUnifiedTopology: true }
)
  .then((client) => {
    const db = client.db("OMM");
  
    const gallery = db.collection("meme_gallery")
    const users = db.collection("users");
    const statistics = db.collection("statistics");

    app.use(bodyParser.urlencoded({ extended: true }));
    app.use(bodyParser.json());
    app.use(cors());
    app.use(express.static(path.join(__dirname, "../public")));

    app.listen(5500, function () {
      console.log("listening on 5500");
    });
 
    // returns the image collection from DB 
    app.get("/images", cors(), (req, res) => {
      db.collection("memes")
        .find()
        .toArray()
        .then((results) => {
          res.json(results);
        });
    });

    // returns the memes collection from DB 
    app.get("/memes", cors(), (req, res) => {
      gallery
        .find({ $or: [ { private: null}, { private: "false"}] })
        .toArray()
        .then((results) => {
          res.json(results);
        });
    });

    // get meme by id
    app.get("/memes/:id", cors(), (req, res) => {
      gallery
        .find({memeid: req.params.id})
        .toArray()
        .then((results) => {
          res.json(results);
        });
    });

    // get memes generated by specific user
    app.get("/memes/users/:userid", cors(), (req, res) => {
      gallery
        .find({user: req.params.userid})
        .toArray()
        .then((results) => {
          res.json(results);
        });
    });

    // get comments of a meme by memeid
    app.get("/comments/:id", cors(), async (req, res) => {
      const entry = await gallery.findOne({memeid: req.params.id});
      if(entry){
        res.status(200).send(entry.comments);
      } else {
        res.status(404).send('No meme found')
      }
    });

    // add comment to meme by memeid
    app.post("/comments/:id", upload.none(), async (req, res) => {
      const newComment = req.body;
      const entry = await gallery.findOne({memeid: req.params.id});
      if(entry){
        // add comments to existing comments
        if(entry.comments) {
          gallery.updateOne({memeid: req.params.id}, 
            { $push: {comments : { 
              userid: newComment.userid,
              userName: newComment.userName,
              text: newComment.text,
              created: newComment.created }}})
        } else {
          // create new comment-attribute in database
          gallery.updateOne({memeid: req.params.id}, 
            { $push: { 
              comments: { 
                userid: newComment.userid,
                userName: newComment.userName,
                text: newComment.text,
                created: newComment.created }
               }})
          }
          res.sendStatus(201);
        } else {
        res.status(404).send('No meme found')
      }
    });

    // add new meme to database
    app.post("/memes", upload.none(), async (req, res) => {
      const formData = req.body;
      gallery.insertOne(formData).then(res.sendStatus(201));
    });

    app.post("/auth/signup",cors(), async (req, res) => {
      // check if user and password in user collection --> error
      const entry = await users.findOne({email:req.body.email})
      if(entry){
        res.status(400).send('User already exists')
      }
      // create new user and send token
      else{
        const userid = shortid.generate()
        users.insertOne({
          id: userid,
          email: req.body.email,
          name: req.body.name,
          password: req.body.password
        })
        res.status(200).send(
          {
            userid: userid,
            name: req.body.name,
            email: req.body.email,
            token: 'token'

          })
      } 
    })

    app.post("/auth/login", cors(), async (req, res) => {
      //check if user and password in user collection
      const entry = await users.findOne({email:req.body.email})
      if(entry){
        entry.password === req.body.password ? 
        res.status(200).send({
          userid: entry.id,
          name: entry.name || 'Mr. X',
          email: entry.email,
          token: 'token'
        }) :
        res.status(400).send('wrong password');
      }
      else{
        res.status(400).send('no account');
      }
    })

    // handle user votes from meme-gallery
    app.put("/vote", async (req, res) => {

      const entry = await gallery.findOne({memeid: req.body.memeid})
      if (entry) {
        // handle account-bound vote
        if(req.body.userid){  
          // handle downvote
          if(req.body.vote === -1){
            gallery.updateOne({memeid: req.body.memeid}, 
              { $push: { 
                downvotedBy: req.body.userid
                  }});
            
          } else {
            // handle upvote
            gallery.updateOne({memeid: req.body.memeid}, 
              { $push: { upvotedBy: req.body.userid }});
          } 
        } 

        // update vote in database
        req.body.vote === -1 ? 
        db.collection("meme_gallery").updateOne({memeid: req.body.memeid},
        {$set: { downvotes: parseInt(entry.downvotes) + 1 },})
        // updated successfully
        .then(res.sendStatus(204))
        : db.collection("meme_gallery").updateOne({memeid: req.body.memeid},
        {$set: { upvotes: parseInt(entry.upvotes) + 1 },})
        .then(res.sendStatus(204))
        
      } else {
        // bad request
        res.sendStatus(400)
      }
      
    })

    // put user views to meme-gallery
    app.put("/views", async (req, res) => {
      const entry = await db.collection("meme_gallery").findOne({_id: new ObjectId(req.body.id)})
      if (entry) {
        db.collection("meme_gallery").updateOne({_id: new ObjectId(req.body.id)},
        {$set: { views: parseInt(entry.views) + 1 },})
          .then(res.sendStatus(204))
      } else {
        // bad request
        res.sendStatus(400)
      }
    })

    // returns a zip archive
    app.get("/download", (req, res) => {
      console.log(req.query.ids)
      gallery
        .find()
        .toArray()
        .then((results) => {
          const archiver = require('archiver')

          res.writeHead(200, {
            'Content-Type': 'application/zip',
            'Content-disposition': 'attachment; filename=Memes.zip'
          })

          const zip = archiver('zip')
          zip.pipe(res);
          results = results.filter((res) => {return req.query.ids.includes(res._id.toString())})
          for (let i = 0; i < results.length; i++) {
            const img = results[i].imgBase64
            const data = img.replace(/^data:image\/\w+;base64,/, "")
            const buf = new Buffer.from(data, 'base64')
            zip.append(buf, {name:`${i}.png`})
          }
          zip.finalize()
        })
    });

    // get statistical data from database
    app.get("/statistics", cors(), (req, res) => {
      statistics
        .find()
        .toArray()
        .then((results) => {
          res.json(results);
        });
    });
    
     // add statistical data to database
     app.post("/statistics", upload.none(), async (req, res) => {
      const formData = req.body;
      statistics.insertOne(formData).then(res.sendStatus(201));
    });

    // used as a proxy to set the CORS header for remote sources
    app.get("/proxy", cors(), (req, res) => {
      req.pipe(request(req.query.url)).pipe(res);
  })
  })
  .catch((error) => console.error(error));

function escapeRegex(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
